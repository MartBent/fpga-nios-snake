--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=11 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 21.1 cbx_cycloneii 2021:10:21:11:02:24:SJ cbx_lpm_add_sub 2021:10:21:11:02:24:SJ cbx_lpm_compare 2021:10:21:11:02:24:SJ cbx_lpm_decode 2021:10:21:11:02:24:SJ cbx_mgl 2021:10:21:11:11:47:SJ cbx_nadder 2021:10:21:11:02:24:SJ cbx_stratix 2021:10:21:11:02:24:SJ cbx_stratixii 2021:10:21:11:02:24:SJ  VERSION_END


-- Copyright (C) 2021  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.



--synthesis_resources = lut 18 
SUBDESIGN decode_oma
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[10..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[10..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode5783w[1..0]	: WIRE;
	w_anode5792w[3..0]	: WIRE;
	w_anode5809w[3..0]	: WIRE;
	w_anode5819w[3..0]	: WIRE;
	w_anode5829w[3..0]	: WIRE;
	w_anode5839w[3..0]	: WIRE;
	w_anode5849w[3..0]	: WIRE;
	w_anode5859w[3..0]	: WIRE;
	w_anode5869w[3..0]	: WIRE;
	w_anode5881w[1..0]	: WIRE;
	w_anode5888w[3..0]	: WIRE;
	w_anode5899w[3..0]	: WIRE;
	w_anode5909w[3..0]	: WIRE;
	w_anode5919w[3..0]	: WIRE;
	w_anode5929w[3..0]	: WIRE;
	w_anode5939w[3..0]	: WIRE;
	w_anode5949w[3..0]	: WIRE;
	w_anode5959w[3..0]	: WIRE;
	w_data5781w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[10..0] = eq_wire[10..0];
	eq_wire[] = ( ( w_anode5959w[3..3], w_anode5949w[3..3], w_anode5939w[3..3], w_anode5929w[3..3], w_anode5919w[3..3], w_anode5909w[3..3], w_anode5899w[3..3], w_anode5888w[3..3]), ( w_anode5869w[3..3], w_anode5859w[3..3], w_anode5849w[3..3], w_anode5839w[3..3], w_anode5829w[3..3], w_anode5819w[3..3], w_anode5809w[3..3], w_anode5792w[3..3]));
	w_anode5783w[] = ( (w_anode5783w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode5792w[] = ( (w_anode5792w[2..2] & (! w_data5781w[2..2])), (w_anode5792w[1..1] & (! w_data5781w[1..1])), (w_anode5792w[0..0] & (! w_data5781w[0..0])), w_anode5783w[1..1]);
	w_anode5809w[] = ( (w_anode5809w[2..2] & (! w_data5781w[2..2])), (w_anode5809w[1..1] & (! w_data5781w[1..1])), (w_anode5809w[0..0] & w_data5781w[0..0]), w_anode5783w[1..1]);
	w_anode5819w[] = ( (w_anode5819w[2..2] & (! w_data5781w[2..2])), (w_anode5819w[1..1] & w_data5781w[1..1]), (w_anode5819w[0..0] & (! w_data5781w[0..0])), w_anode5783w[1..1]);
	w_anode5829w[] = ( (w_anode5829w[2..2] & (! w_data5781w[2..2])), (w_anode5829w[1..1] & w_data5781w[1..1]), (w_anode5829w[0..0] & w_data5781w[0..0]), w_anode5783w[1..1]);
	w_anode5839w[] = ( (w_anode5839w[2..2] & w_data5781w[2..2]), (w_anode5839w[1..1] & (! w_data5781w[1..1])), (w_anode5839w[0..0] & (! w_data5781w[0..0])), w_anode5783w[1..1]);
	w_anode5849w[] = ( (w_anode5849w[2..2] & w_data5781w[2..2]), (w_anode5849w[1..1] & (! w_data5781w[1..1])), (w_anode5849w[0..0] & w_data5781w[0..0]), w_anode5783w[1..1]);
	w_anode5859w[] = ( (w_anode5859w[2..2] & w_data5781w[2..2]), (w_anode5859w[1..1] & w_data5781w[1..1]), (w_anode5859w[0..0] & (! w_data5781w[0..0])), w_anode5783w[1..1]);
	w_anode5869w[] = ( (w_anode5869w[2..2] & w_data5781w[2..2]), (w_anode5869w[1..1] & w_data5781w[1..1]), (w_anode5869w[0..0] & w_data5781w[0..0]), w_anode5783w[1..1]);
	w_anode5881w[] = ( (w_anode5881w[0..0] & data_wire[3..3]), enable_wire);
	w_anode5888w[] = ( (w_anode5888w[2..2] & (! w_data5781w[2..2])), (w_anode5888w[1..1] & (! w_data5781w[1..1])), (w_anode5888w[0..0] & (! w_data5781w[0..0])), w_anode5881w[1..1]);
	w_anode5899w[] = ( (w_anode5899w[2..2] & (! w_data5781w[2..2])), (w_anode5899w[1..1] & (! w_data5781w[1..1])), (w_anode5899w[0..0] & w_data5781w[0..0]), w_anode5881w[1..1]);
	w_anode5909w[] = ( (w_anode5909w[2..2] & (! w_data5781w[2..2])), (w_anode5909w[1..1] & w_data5781w[1..1]), (w_anode5909w[0..0] & (! w_data5781w[0..0])), w_anode5881w[1..1]);
	w_anode5919w[] = ( (w_anode5919w[2..2] & (! w_data5781w[2..2])), (w_anode5919w[1..1] & w_data5781w[1..1]), (w_anode5919w[0..0] & w_data5781w[0..0]), w_anode5881w[1..1]);
	w_anode5929w[] = ( (w_anode5929w[2..2] & w_data5781w[2..2]), (w_anode5929w[1..1] & (! w_data5781w[1..1])), (w_anode5929w[0..0] & (! w_data5781w[0..0])), w_anode5881w[1..1]);
	w_anode5939w[] = ( (w_anode5939w[2..2] & w_data5781w[2..2]), (w_anode5939w[1..1] & (! w_data5781w[1..1])), (w_anode5939w[0..0] & w_data5781w[0..0]), w_anode5881w[1..1]);
	w_anode5949w[] = ( (w_anode5949w[2..2] & w_data5781w[2..2]), (w_anode5949w[1..1] & w_data5781w[1..1]), (w_anode5949w[0..0] & (! w_data5781w[0..0])), w_anode5881w[1..1]);
	w_anode5959w[] = ( (w_anode5959w[2..2] & w_data5781w[2..2]), (w_anode5959w[1..1] & w_data5781w[1..1]), (w_anode5959w[0..0] & w_data5781w[0..0]), w_anode5881w[1..1]);
	w_data5781w[2..0] = data_wire[2..0];
END;
--VALID FILE
